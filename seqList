#include<iostream>

template<class elemtype>
class list
{
public:
    virtual void clear()=0;
    virtual int lenth() const=0;
    virtual void insert(int i,const elemtype &x)=0;
    virtual void remove(int i)=0;
    virtual elemtype search(const elemtype &x)=0;
    virtual elemtype visit(int i) const=0;
    virtual void traverse()const=0;
    virtual ~list() {};
};

template<class elemtype>
class seqList:public list<elemtype>
{
private:
    elemtype* data;
    int currentLenth;
    int maxSize;
    void doubleSpace();          //扩大数组空间
public:
    seqList(int initSize=10);
    ~seqList();
    void clear();
    int lenth() const;
    void insert(int i,const elemtype &x);
    void remove(int i);
    int search(const elemtype &x);
    elemtype visit(int i) const;
    void traverse()const;
    void erase(int i);
};
//构造函数的实现
template<class elemtype>
seqList<elemtype>::seqList(int initSize){
    data=new elemtype[initSize];
    maxSize=initSize;
    currentLenth=0;
}
//析构函数，释放数组数据
template<class elemtype>
seqList<elemtype>::~seqList(){
    delete[] data;
}
//clear 函数，清空数组数据
template<class elemtype>
void seqList<elemtype>::clear(){
    currentLenth = 0;
}
//返回数组长度
template<class elemtype>
int seqList<elemtype>::lenth()const{
    return currentLenth;
}
//访问i位置上的元素
template<class elemtype>
elemtype seqList<elemtype>::visit(int i)const{
    return data[i];
}
//遍历数据
template<class elemtype>
void seqList<elemtype>::traverse()const{
    std::cout<<std::endl;
    for(int i=0;i<currentLenth;++i){
        std::cout<<data[i]<<' ';
    }
}
//search函数的实现
template<class elemtype>
int seqList<elemtype>::search(const elemtype& x){
    int i=0;
    for(;i<currentLenth&&x!=data[i];++i);
    if(i==currentLenth)
        return -1;
    else return i;
}
//数组变长
template<class elemtype>
void seqList<elemtype>::doubleSpace(){
    elemtype* tmp=data;
    maxSize*=2;

    data =new elemtype[maxSize];
    for(int i=0;i<currentLenth;++i){
        data[i]=tmp[i];
    }
    delete[] tmp;
}
//插入元素
template<class elemtype>
void seqList<elemtype>::insert(int i,const elemtype& x){
    if(currentLenth==maxSize){
        doubleSpace();
    }
    for(int j=currentLenth;j>i;--j){
        data[j]=data[j-1];
    }
    data[i]=x;
    ++currentLenth;
}
//删除元素
template<class elemtype>
void seqList<elemtype>::remove(int i){
    for(int j=i;j<currentLenth;++j){
        data[j]=data[j+1];
    }
    --currentLenth;
} 
//删除等于i位置的元素
template<class elemtype>
void seqList<elemtype>::erase(int i){
    elemtype tmp=data[i];
    int cnt=0;
    for(int j=0;j<currentLenth;++j){
        if(tmp==data[j]){
            ++cnt;
        }
        else{
            data[j-cnt]=data[j];
        }
    }
    currentLenth-=cnt;
}
int main(){
    system("pause");
    return 0;
}
